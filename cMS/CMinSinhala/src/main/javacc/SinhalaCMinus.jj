/* =====================================================================================================================

 * W.G.H. Amila Manoj Silva
 * 080475F
 * සී මයිනස්
     ___|        \  | _)
  |           |\/ |  |  __ \   |   |   __|
  |   _____|  |   |  |  |   |  |   | \__ \
 \____|      _|  _| _| _|  _| \__,_| ____/

======================================================================================================================*/



 // ======================================== a bunch of optional parameters ============================================
 // ====================================================================================================================
options {
   STATIC = false;   // this allows only one parser object to be present default: true
   BUILD_PARSER = true;  // default: true
   BUILD_TOKEN_MANAGER = true; // default: true
   SANITY_CHECK = true; // performs syntactic and semantic checks such as detection of left recursion, detection of ambiguity and bad usage of empty expansions
   IGNORE_CASE = false;  // generated token manager ignores case in the token specifications and the input files default: false
//   LOOKAHEAD = 1;    // The number of tokens to look ahead before making a decision at a choice point during parsing default: 1
//   CHOICE_AMBIGUITY_CHECK = 2;  the number of tokens considered in checking choices of the form "A | B | ..." for ambiguity
     JAVA_UNICODE_ESCAPE = true; // the generated parser uses an input stream object that processes Java Unicode escapes
//   UNICODE_INPUT = false;      // the generated parser uses an input stream object that reads Unicode files
 }

// ================================= this block must be there in a javacc grammer file =================================
// =====================================================================================================================
 PARSER_BEGIN(SinhalaCMinusParser)

    public class SinhalaCMinusParser {}

 PARSER_END(SinhalaCMinusParser)

// ============================ regular expression declarations for lexical analizer generation ========================
// =====================================================================================================================

/* white space is to be ignored*/
SKIP :
{
  " "    // blanks
| "\t"   // tab
| "\n"   // new line (line feed) character
| "\r"   // carriage return character (these and new line characters are skipped)
| "\f"
| "\uFEFF"
}


/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}



/* keywords of c- */
TOKEN :
{
 < ELSE: "\u0DB1\u0DD0\u0DAD\u0DCA\u0DB1\u0DB8\u0DCA" >
| < IF: "\u0DB1\u0DB8\u0DCA" >
| < INT: "\u0DB1\u0DD2\u0D9B\u0DD2\u0DBD" >
| < RETURN: "\u0D86\u0DB4\u0DC3\u0DD4" >
| < VOID: "\u0DC4\u0DD2\u0DC3\u0DCA" >
| < WHILE: "\u0DAD\u0DD9\u0D9A\u0DCA" >
}

/* identifier */
TOKEN :
{
  < ID: <letter> (<letter>)* >
|
  < #letter:
      [
         "A"-"Z",
         "a"-"z",
         "_",
         "\u0D80"-"\u0DFF"
      ]
  >
}
// void S(): {} { E() <EOF>           }
// void E(): {} { T() ("+" T())*      }
// void T(): {} { F() ("*" F())*      }
// void F(): {} { <NUM> | "(" E() ")" }

/* Number */
TOKEN :
{
  < NUM: <digit> (<digit>)* >
|
  < #digit:
      [
         "0"-"9"
      ]
  >

}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
|  < ASSIGN: "=" >
| < LT: "<" >
| < RT: ">" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >

}

// ================================ C-Minus grammar for parser generation in BNF form ==================================
// =====================================================================================================================

// 1
void Program():
{
System.out.println("Program");
}
{
    DeclarationList() <EOF>
}

// 2
// Original production rule: DL -> DL D | D
// this causes left-recursion
// can be replace with: DL -> D DL' and DL' -> D DL'
// but, since javacc allows EBNF, there is an easy way :)
// we can just replace it with: DL -> D (D)* aka DL -> D { D }
void DeclarationList():
{
System.out.println("DeclarationList");
}
{
    Declaration() ( Declaration() )*
}

// 3
void Declaration():
{
System.out.println("Declaration");
}
{
    LOOKAHEAD(3)
    VariableDeclaration() | FunctionDeclaration()
}

// 4
//void VariableDeclaration():
//{}
//{
//    LOOKAHEAD(3)
//    TypeSpecifier() <ID> ";" |  TypeSpecifier() <ID> "[" <NUM> "]" ";"
//}

// 4 Modified using EBNF.  btw [ E ] and ( E )? are equivalent
void VariableDeclaration():
{
System.out.println("VariableDeclaration");
}
{
    TypeSpecifier() <ID> ( "[" <NUM> "]" )? ";"
}

// 5
void TypeSpecifier():
{
System.out.println("TypeSpecifier");
}
{
    <INT> | <VOID>
}

// 6
void FunctionDeclaration():
{
System.out.println("FunctionDeclaration");
}
{
    TypeSpecifier() <ID> "(" Params() ")" CompoundStatement()
}

// 7
void Params():
{
System.out.println("Params");
}
{
    LOOKAHEAD(2)
    ParamList() | <VOID>
}

// 8
void ParamList():
{
System.out.println("ParamList");
}
{
   Param() ( "," Param() )*
}

// 9
void Param():
{
System.out.println("Param");
}
{
    LOOKAHEAD(TypeSpecifier() <ID> "[")
    TypeSpecifier() <ID> "[" "]" | TypeSpecifier() <ID>
}

// 10
void CompoundStatement():
{
System.out.println("CompoundStatement");
}
{
    "{" LocalDeclarations() StatementList() "}"
}

// 11
// Original production rule: LD -> LD VD | e
void LocalDeclarations():
{
System.out.println("LocalDeclarations");
}
{
    ( VariableDeclaration() )*
}

//12
// Original production rule: SL -> SL S | e
void StatementList():
{System.out.println("StatementList");
}
{
   ( Statement() )*
}

//13
void Statement():
{System.out.println("Statement");
}
{
    LOOKAHEAD(Var())
   ExpressionStatement() | CompoundStatement() | SelectionStatement()
   | IterationStatement() | ReturnStatement()
}

//14
void ExpressionStatement():
{System.out.println("ExpressionStatement");
}
{
   Expression() ";" | ";"
}

//15
/*
* The disambiguating algorithm of JavaCC automatically binds dangling
* else's to the innermost if statement.  The LOOKAHEAD specification
* is to tell JavaCC that we know what we are doing.
*/
void SelectionStatement():
{System.out.println("SelectionStatement");
}
{
    <IF> "(" Expression() ")" Statement() [ LOOKAHEAD(1) <ELSE> Statement() ]

}

//16
void IterationStatement():
{System.out.println("IterationStatement");
}
{
    <WHILE> "(" Expression() ")" Statement()
}

//17
void ReturnStatement():
{System.out.println("ReturnStatement");
}
{
    <RETURN> ( Expression() )? ";"
}

//18
void Expression():
{System.out.println("Expression");
}
{
    LOOKAHEAD( Var() "=" )
    Var() "=" Expression() | SimpleExpression()
}

//19  modified using EBNF
void Var():
{System.out.println("Var");
}
{
    LOOKAHEAD( <ID> "[" )
    <ID> "[" Expression() "]" | <ID>
}

//20
void SimpleExpression():
{System.out.println("SimpleExpression");
}
{
    LOOKAHEAD(AdditiveExpression() RelOperator())
    AdditiveExpression() RelOperator() AdditiveExpression() | AdditiveExpression()
}

//21
void RelOperator():
{System.out.println("RelOperator");
}
{
    "<=" | "<" | ">" | ">=" | "==" | "!="
}

//22
// Original production rule: AE -> AE AO TERM | TERM
void AdditiveExpression():
{System.out.println("AdditiveExpression");
}
{
    Term() ( AppOP() Term() )*
}

//23
void AppOP():
{System.out.println("AppOP");
}
{
    "+" | "-"
}

//24
// Original production rule: Term -> Term MO FT | FT
void Term():
{System.out.println("Term");
}
{
    Factor() ( MulOp() Factor() )*
}

//25
void MulOp():
{System.out.println("MulOp");
}
{
    "*" | "/"
}

//26
void Factor():
{System.out.println("Factor");
}
{
    LOOKAHEAD( <ID> "(" )
     Call() | Var() |"(" Expression() ")" |  <NUM>
}

//27
void Call():
{System.out.println("Call");
}
{
    LOOKAHEAD( <ID> "(" ")" )
    <ID> "(" ")" | <ID> "(" ArgList() ")"
}

//28
//void Args():
//{}
//{
//    ArgList() | ""
//}

//29
void ArgList():
{System.out.println("ArgList");}
{
    Expression() ( "," Expression() )*
}

